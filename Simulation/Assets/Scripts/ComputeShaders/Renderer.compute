#pragma kernel Render2D; // 0

#pragma multi_compile _ DRAW_RB_CENTROIDS

#include "MathResources.hlsl"
#include "CompositionResources.hlsl"
#include "DataTypes.hlsl"
#include "Constants.hlsl"

const float VisualParticleRadii;
const float RBRenderThickness;
const int RBVectorNum;
const int2 Resolution;
const float3 BackgroundColor;

const int2 BoundsDims;
const int MaxInfluenceRadius;
const int2 ChunksNum;
const int ParticlesNum;
const int RBodiesNum;

RWTexture2D<unorm float4> Result;
Texture2D<unorm float4> UITexture;

StructuredBuffer<int2> SpatialLookup; 
StructuredBuffer<int> StartIndices;

StructuredBuffer<PType> PTypes;
StructuredBuffer<PData> PDatas;

StructuredBuffer<RigidBody> RigidBodies;
StructuredBuffer<RBVector> RBVectors;

bool ValidChunk(int2 chunk)
{
    return chunk.x >= 0 && chunk.x < ChunksNum.x && chunk.y >= 0 && chunk.y < ChunksNum.y;
}

int GetChunkKey(int2 chunk)
{
    return chunk.y * ChunksNum.x + chunk.x;
}

float3 TemperatureToRGB(float temperature)
{
    float normalizedTemp = saturate((temperature - 273.0) / (373.0 - 273.0));

    float3 color;

    if (normalizedTemp < 0.1)
    {
        // Light blue to dark blue transition
        color = lerp(float3(0.5, 0.5, 1.0), float3(0.0, 0.0, 1.0), 2.5 * normalizedTemp);
    }
    else if (normalizedTemp < 0.5)
    {
        // Dark blue to green transition
        color = lerp(float3(0.0, 0.0, 1.0), float3(0.0, 1.0, 0.0), 2.5 * (normalizedTemp - 0.1));
    }
    else
    {
        // Green to red transition
        color = lerp(float3(0.0, 1.0, 0.0), float3(1.0, 0.0, 0.0), 2.5 * (normalizedTemp - 0.5));
    }

    return color;
}

float3 VelocityToRGB(float2 velocity, float g)
{
    // Not really normalized
    float normalizedVelLength = length(velocity) * 0.1;

    float r = min(1.0, normalizedVelLength);
    float b = max(0.0, 1 - normalizedVelLength);

    return float3(r, g, b);
}

bool IsPointInsideRB(float2 pos, RigidBody rb)
{
    // Transform the point position into the local coordinate space of the rigid body
    float2 localPos = pos - rb.pos;

    uint intersections = 0;
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    uint numVertices = endIndex - startIndex + 1;

    float2 lastVec = RBVectors[startIndex].pos;
    for (uint i = 0; i < numVertices; i++)
    {
        uint vecIndex = wrapUint(startIndex + i, startIndex, endIndex);
        float2 newVec = RBVectors[vecIndex].pos;

        // Check if the edge from lastVec to newVec intersects the horizontal ray to the right of localPos
        if (IsPointToTheLeftOfLine(localPos, lastVec, newVec)) intersections++;

        lastVec = newVec;
    }

    // The point is inside the polygon if the number of intersections is odd
    bool isInside = (intersections % 2) == 1;

    return isInside;
}

[numthreads(TN_R,TN_R,1)]
void Render2D(uint3 id : SV_DispatchThreadID)
{
    // Render UI on top of everything else
    float4 uiCol = UITexture[id.xy];
    if (uiCol.w > 0)
    {
        Result[id.xy] = uiCol;
        return;
    }

    float2 pixelPos = id.xy * BoundsDims / (float2)Resolution;
    int2 chunk = (int2)(pixelPos / (float)MaxInfluenceRadius);

    // Render rigid bodies
    bool rigidBodyFound = false;
    int highestRenderPriority;
    float4 result;
    for (int rbIndex = 0; rbIndex < RBodiesNum; rbIndex++)
    {
        RigidBody rb = RigidBodies[rbIndex];
        
        #if DRAW_RB_CENTROIDS
            if (dot2(pixelPos - rb.pos) < 2.0)
            {
                Result[id.xy] = float4(1, 0, 0, 1.0);
                return;
            }
        #endif
        
        if (rb.renderPriority > highestRenderPriority)
        {
            if (IsPointInsideRB(pixelPos, rb))
            {
                result = float4(rb.col.x, rb.col.y, rb.col.z, 1.0);
                highestRenderPriority = rb.renderPriority;
                rigidBodyFound = true;
            }
        }
    }
    if (rigidBodyFound)
    {
        Result[id.xy] = result;
        return;
    }

    // Render particles
    int2 curChunk;
    float minDst = VisualParticleRadii;
    bool particleFound = false;
    for (int x = -1; x <= 1; x++)
    {
        curChunk.x = chunk.x + x;
        for (int y = -1; y <= 1; y++)
        {
            curChunk.y = chunk.y + y;

            if (!ValidChunk(curChunk)) continue;

            int chunkKey = GetChunkKey(curChunk);
            int startIndex = StartIndices[chunkKey];

            int index = startIndex; 
            while (index < ParticlesNum && chunkKey == SpatialLookup[index].y)
            {
                int pIndex = SpatialLookup[index].x;
                PData pData = PDatas[pIndex];

                float dst = length(pixelPos - pData.pos);
                if (dst < minDst)
                {
                    // visualize velocity / temperature
                    float3 rgb = VelocityToRGB(pData.vel, PTypes[Extract_PType(pData.lastChunkKey_PType_POrder)].colorG);
                    // float3 rgb = TemperatureToRGB(pData.temperature);

                    Result[id.xy] = float4(rgb.x, rgb.y, rgb.z, 0.0);
                    minDst = dst;
                    particleFound = true;
                }

                // Increment index each iteration - Chunk particle search algorithm
                index++;
            }
        }
    }
    if (particleFound) return;

    Result[id.xy] = float4(BackgroundColor.x, BackgroundColor.y, BackgroundColor.z, 1.0);
}