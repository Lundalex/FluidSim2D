#pragma kernel Render2D; // 0

#pragma kernel RenderFluids; // 0
#pragma kernel RenderRigidBodies; // 1
#pragma kernel ApplyMaterials; // 2

#pragma multi_compile _ DRAW_RB_CENTROIDS
#pragma multi_compile _ DRAW_RB_EDGES
#pragma multi_compile _ USE_METABALLS

#include "MathResources.hlsl"
#include "CompositionResources.hlsl"
#include "DataTypes.hlsl"
#include "Constants.hlsl"

const float VisualParticleRadii;
const float MetaballsThreshold;
const float EdgeWidth;
const int RBVectorNum;
const int2 Resolution;
const float3 BackgroundColor;
const float3 EdgeColor;

const int2 BoundsDims;
const int MaxInfluenceRadius;
const int2 ChunksNum;
const int ParticlesNum;
const int RBodiesNum;

RWTexture2D<unorm float4> Result;
Texture2D<unorm float4> CausticsTexture;
Texture2D<unorm float4> UITexture;
StructuredBuffer<int2> SpatialLookup; 
StructuredBuffer<int> StartIndices;

StructuredBuffer<PType> PTypes;
StructuredBuffer<PData> PDatas;

StructuredBuffer<RigidBody> RigidBodies;
StructuredBuffer<RBVector> RBVectors;

bool ValidChunk(int2 chunk)
{
    return chunk.x >= 0 && chunk.x < ChunksNum.x && chunk.y >= 0 && chunk.y < ChunksNum.y;
}

int GetChunkKey(int2 chunk)
{
    return chunk.y * ChunksNum.x + chunk.x;
}

float3 TemperatureToRGB(float temperature)
{
    float normalizedTemp = saturate((temperature - 273.0) / (373.0 - 273.0));

    float3 color;

    if (normalizedTemp < 0.1)
    {
        // Light blue to dark blue transition
        color = lerp(float3(0.5, 0.5, 1.0), float3(0.0, 0.0, 1.0), 2.5 * normalizedTemp);
    }
    else if (normalizedTemp < 0.5)
    {
        // Dark blue to green transition
        color = lerp(float3(0.0, 0.0, 1.0), float3(0.0, 1.0, 0.0), 2.5 * (normalizedTemp - 0.1));
    }
    else
    {
        // Green to red transition
        color = lerp(float3(0.0, 1.0, 0.0), float3(1.0, 0.0, 0.0), 2.5 * (normalizedTemp - 0.5));
    }

    return color;
}

float3 VelocityToRGB(float2 velocity, float g)
{
    // Not really normalized
    float normalizedVelLength = length(velocity) * 0.1;

    float r = min(1.0, normalizedVelLength);
    float b = max(0.0, 1 - normalizedVelLength);

    return float3(r, g, b);
}

bool IsPointInsideRB(float2 pos, RigidBody rb)
{
    // Transform the point position into the local coordinate space of the rigid body
    float2 localPos = pos - rb.pos;

    uint intersections = 0;
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    uint numVertices = endIndex - startIndex + 1;

    float2 lastVec = RBVectors[startIndex].pos;
    for (uint i = 0; i < numVertices; i++)
    {
        uint vecIndex = wrapUint(startIndex + i, startIndex, endIndex);
        float2 newVec = RBVectors[vecIndex].pos;

        // Check if the edge from lastVec to newVec intersects the horizontal ray to the right of localPos
        if (IsPointToTheLeftOfLine(localPos, lastVec, newVec)) intersections++;

        lastVec = newVec;
    }

    // The point is inside the polygon if the number of intersections is odd
    bool isInside = (intersections % 2) == 1;

    return isInside;
}

float DstToRB(float2 pos, RigidBody rb)
{
    // Keep the last vector stored to avoid redundant data fetches
    RBVector lastVec = RBVectors[rb.startIndex];

    float minDstSqr = 1.#INF;
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    for (uint vecIndex = startIndex + 1; vecIndex <= endIndex; vecIndex++)
    {
        RBVector newVec = RBVectors[wrapUint(vecIndex, startIndex, endIndex)];

        float2 dst = DstToLineSegment(lastVec.pos + rb.pos, newVec.pos + rb.pos, pos);

        float dstSqr = dot2(dst);
        if (dstSqr < minDstSqr) minDstSqr = dstSqr;

        lastVec = newVec;
    }

    float dst = minDstSqr == 1.#INF ? 1.#INF : sqrt(minDstSqr);

    return dst;
}

float MetaballsDensity(float dstSqr, float radius)
{
    float dstR = sqrt(dstSqr) / radius;
    return (1 - dstR);
}

float4 GetRenderColor(PData pData)
{
    // visualize velocity / temperature
    float3 rgb = VelocityToRGB(pData.vel, PTypes[Extract_PType(pData.lastChunkKey_PType_POrder)].colorG);
    // float3 rgb = TemperatureToRGB(pData.temperature);

    return float4(rgb.x, rgb.y, rgb.z, 0.0);
}

static const float3 COLOR_MULTIPLIER = float3(0.0, 0.0, 0.2);
static const float3 COLOR_ADDITION = float3(0.0, 0.0, 0.8);
static const float ALPHA_ADDITION = 1.0;
float4 SampleCausticsTexture(uint2 threadID)
{
    float t;
    float2 causticsTexDims;
    CausticsTexture.GetDimensions(0, causticsTexDims.x, causticsTexDims.y, t);

    uint2 wrappedThreadID = threadID % causticsTexDims;

    float4 sample = CausticsTexture[wrappedThreadID];
    
    float3 color = sample.rgb * COLOR_MULTIPLIER + COLOR_ADDITION;
    
    float alpha = saturate(sample.a + ALPHA_ADDITION); // Clamp alpha to [0,1]
    
    return float4(color.r, color.g, color.b, alpha);
}

[numthreads(TN_R,TN_R,1)]
void Render2D(uint3 id : SV_DispatchThreadID)
{
    // Render UI on top of everything else
    float4 uiCol = UITexture[id.xy];
    if (uiCol.w > 0)
    {
        Result[id.xy] = uiCol;
        return;
    }

    float2 pixelPos = id.xy * BoundsDims / (float2)Resolution;
    int2 chunk = (int2)(pixelPos / (float)MaxInfluenceRadius);

    // Render rigid bodies
    bool rigidBodyFound = false;
    int highestRenderPriority = 0;
    float4 result;
    for (int rbIndex = 0; rbIndex < RBodiesNum; rbIndex++)
    {
        RigidBody rb = RigidBodies[rbIndex];
        
        #if DRAW_RB_CENTROIDS
            if (dot2(pixelPos - rb.pos) < 2.0)
            {
                Result[id.xy] = float4(1, 0, 0, 1.0);
                return;
            }
        #endif
        
        if (rb.renderPriority > highestRenderPriority)
        {
            if (IsPointInsideRB(pixelPos, rb))
            {
                rigidBodyFound = true;
                highestRenderPriority = rb.renderPriority;
                
                // Render edge
                #if DRAW_RB_EDGES
                    float dst = DstToRB(pixelPos, rb);
                    if (dst < EdgeWidth)
                    {
                        result = float4(rb.edgeCol.x, rb.edgeCol.y, rb.edgeCol.z, 1.0);
                        continue;
                    }
                #endif
                
                // Render body
                result = float4(rb.col.x, rb.col.y, rb.col.z, 1.0);
            }
        }
    }
    if (rigidBodyFound)
    {
        Result[id.xy] = result;
        return;
    }

    // Render particles
    int2 curChunk;
    #if USE_METABALLS
        float totDensity = 0;
    #else
        bool particleFound = false;
        float minRadius = min(VisualParticleRadii, (float)MaxInfluenceRadius);
        float minRadiusSqr = minRadius * minRadius;
        float minDstSqr = 1.#INF;
    #endif
    for (int x = -1; x <= 1; x++)
    {
        curChunk.x = chunk.x + x;
        for (int y = -1; y <= 1; y++)
        {
            curChunk.y = chunk.y + y;

            if (!ValidChunk(curChunk)) continue;

            int chunkKey = GetChunkKey(curChunk);
            int startIndex = StartIndices[chunkKey];

            int index = startIndex; 
            while (index < ParticlesNum && chunkKey == SpatialLookup[index].y)
            {
                int pIndex = SpatialLookup[index].x;
                PData pData = PDatas[pIndex];

                float dstSqr = dot2(pixelPos - pData.pos);

                #if USE_METABALLS
                    if (dstSqr < pow(MaxInfluenceRadius, 2))
                    {
                        totDensity += MetaballsDensity(dstSqr, MaxInfluenceRadius);

                        if (totDensity > MetaballsThreshold)
                        {
                            Result[id.xy] = SampleCausticsTexture(id.xy);
                            return;
                        }
                    }
                #else
                    if (dstSqr < min(minRadiusSqr, minDstSqr))
                    {
                        minDstSqr = dstSqr;
                        particleFound = true;
                        if (sqrt(dstSqr) > minRadius - EdgeWidth) result = float4(EdgeColor.x, EdgeColor.y, EdgeColor.z, 1.0);
                        else result = SampleCausticsTexture(id.xy);
                    }
                #endif

                // Increment index each iteration - Chunk particle search algorithm
                index++;
            }
        }
    }
    #if !USE_METABALLS
        if (particleFound)
        {
            Result[id.xy] = result;
            return;
        }
    #endif

    Result[id.xy] = float4(BackgroundColor.x, BackgroundColor.y, BackgroundColor.z, 1.0);
}
 
[numthreads(TN_R,TN_R,1)]
void RenderFluids(uint3 id : SV_DispatchThreadID)
{
 
}
 
[numthreads(TN_R,TN_R,1)]
void RenderRigidBodies(uint3 id : SV_DispatchThreadID)
{
 
}
 
[numthreads(TN_R,TN_R,1)]
void ApplyMaterials(uint3 id : SV_DispatchThreadID)
{
 
}