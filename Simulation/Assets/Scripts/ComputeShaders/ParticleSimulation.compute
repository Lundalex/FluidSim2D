#pragma kernel PreCalculations
#pragma kernel CalculateDensities
#pragma kernel ParticleForces

#include "MathResources.hlsl"

static const int ThreadsNum = 1024;

// Constants
const int ChunkNumW;
const int ChunkNumH;
const int IOOR;
const int Width;
const int Height;
const int ParticlesNum;
const int RBodiesNum;
const int MaxInfluenceRadius;
const int SpawnDims;
const int TimeStepsPerRender;

const float LookAheadFactor;
const float RBodyElasticity;
const float BorderPadding;
const float MaxInteractionRadius;
const float InteractionAttractionPower;
const float InteractionFountainPower;
const int SpringCapacity;
const float Plasticity;

// Per-timestep-set constants
const float DeltaTime;
const float MouseX;
const float MouseY;
const bool RMousePressed;
const bool LMousePressed;

// Particles - Buffers
RWStructuredBuffer<int2> SpatialLookup; // [ParticlesNum](particleIndex, ChunkKey)
RWStructuredBuffer<int> StartIndices;

struct SpringStruct
{
    int linkedIndex;
    float restLength;
    // float yieldLen;
    // float plasticity;
    // float stiffness;
};
RWStructuredBuffer<SpringStruct> SpringPairs;

struct PTypeStruct
{
    float TargetDensity;
    int MaxInfluenceRadius;
    float Pressure;
    float NearPressure;
    float Damping;
    float Viscocity;
    float Elasticity;
    float Plasticity;
    float Gravity;
    float colorG;
};
RWStructuredBuffer<PTypeStruct> PTypes;

struct PDataStruct
{
    float2 PredPosition;
    float2 Position;
    float2 Velocity;
    float2 LastVelocity;
    float Density;
    float NearDensity;
    int PType;
};
RWStructuredBuffer<PDataStruct> PData;


bool ValidChunk(int ChunkX, int ChunkY)
{
    if (ChunkX >= 0 && ChunkX < ChunkNumW && ChunkY >= 0 && ChunkY < ChunkNumH) {return true;}
    return false;
}

float2 CalcDensity(int pIndex) // (density, nearDensity)
{
    // Int type conversion removes decimals, effectively doing a Floor() operation
    int ChunkX = (int)(PData[pIndex].PredPosition.x / MaxInfluenceRadius);
    int ChunkY = (int)(PData[pIndex].PredPosition.y / MaxInfluenceRadius);

    float totDensity = 0.0;
    float totNearDensity = 0.0;
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int CurChunkX = ChunkX + x;
            int CurChunkY = ChunkY + y;
            
            if (!ValidChunk(CurChunkX, CurChunkY)) {continue;}

            int ChunkKey = CurChunkY * ChunkNumW + CurChunkX;
            int startIndex = StartIndices[ChunkKey];

            int Index = startIndex;
            while (Index < ParticlesNum && ChunkKey == SpatialLookup[Index].y)
            {
                int otherPIndex = SpatialLookup[Index].x;

                float dst = length(PData[pIndex].PredPosition - PData[otherPIndex].PredPosition);

                totDensity += SmoothLiquid(dst, MaxInfluenceRadius);
                totNearDensity += SmoothLiquidNear(dst, MaxInfluenceRadius);

                // Increment Index each iteration - Chunk particle search algorithm
                Index += 1;
            }
        }
    }
    
    return float2(totDensity, totNearDensity);
}

float4 BoundraryCheck(float2 pos, float2 vel, float extraPadding, float Damping)
{
    float totPadding = BorderPadding + extraPadding;
    float velFactor = 1 - Damping;

    if (pos.y > Height - totPadding)
    {
        vel.y = -abs(vel.y) * velFactor;
        pos.y = Height - totPadding;
    }
    else if (pos.y < totPadding)
    {
        vel.y = abs(vel.y) * velFactor;
        pos.y = totPadding;
    }
    if (pos.x > Width - totPadding)
    {
        vel.x = -abs(vel.x) * velFactor;
        pos.x = Width - totPadding;
    }
    else if (pos.x < totPadding)
    {
        vel.x = abs(vel.x) * velFactor;
        pos.x = totPadding;
    }
    
    return float4(pos.x, pos.y, vel.x, vel.y);
}

float DensityToPressure(float density, float TargetDensity, float Pressure)
{
    float densityError = density - TargetDensity;
    float pressure = densityError * Pressure;
    return pressure;
}

float SharedPressure(float densityA, float densityB, float TargetDensityA, float TargetDensityB, float PressureA, float PressureB)
{
    float pressureA = DensityToPressure(densityA, TargetDensityA, PressureA);
    float pressureB = DensityToPressure(densityB, TargetDensityB, PressureB);
    float sharedPressure = avg(pressureA, pressureB);

    return sharedPressure;
}

float SharedNearPressure(float nearDensityA, float nearDensityB, float NearPressureMultiplierA, float NearPressureMultiplierB)
{
    float nearPressureA = nearDensityA * NearPressureMultiplierA;
    float nearPressureB = nearDensityB * NearPressureMultiplierB;
    float sharedNearPressure = avg(nearPressureA, nearPressureB);

    return sharedNearPressure;
}

float2 PressureForce(PDataStruct PData_i, PDataStruct PData_otherPIndex, PTypeStruct PType_i, PTypeStruct PType_otherPIndex, float absDst, float2 dst, int randSeed)
{
    float absPressureGradient = SmoothLiquidDer(absDst, MaxInfluenceRadius);
    float absNearPressureGradient = SmoothLiquidNearDer(absDst, MaxInfluenceRadius);

    float2 pressureGradient = float2(0.0, 0.0);
    float2 nearPressureGradient = float2(0.0, 0.0);

    if (absDst == 0) {
        // semirandom direction, not normalized
        float2 randVector = float2(randSeed % 0.2842, randSeed % 0.1827);

        pressureGradient = 0.05 * randVector * absPressureGradient;
        nearPressureGradient = 0.05 * randVector * absNearPressureGradient;
    }
    else {
        pressureGradient = normalize(dst) * absPressureGradient;
        nearPressureGradient = normalize(dst) * absNearPressureGradient;
    }

    float densityA = PData_i.Density;
    float densityB = PData_otherPIndex.Density;
    float avgPressure = SharedPressure(densityA, densityB, PType_i.TargetDensity, PType_otherPIndex.TargetDensity, PType_i.Pressure, PType_otherPIndex.Pressure);

    float nearDensityA = PData_i.NearDensity;
    float nearDensityB = PData_otherPIndex.NearDensity;
    float avgNearPressure = SharedNearPressure(nearDensityA, nearDensityB, PType_i.NearPressure, PType_otherPIndex.NearPressure);

    if (densityA + densityB == 0) {return float2(0.0, 0.0);}
    float2 pressureForce = (avgPressure * pressureGradient + avgNearPressure * nearPressureGradient) / avg(densityA, densityB);

    return pressureForce;
}

float2 ViscocityForce(PDataStruct PData_i, PDataStruct PData_otherPIndex, PTypeStruct PType_i, PTypeStruct PType_otherPIndex, float absDst)
{
    float2 viscocityForce = (PData_otherPIndex.LastVelocity - PData_i.LastVelocity) * SmoothViscosityLaplacian(absDst, MaxInfluenceRadius);

    return viscocityForce * avg(PType_i.Viscocity, PType_otherPIndex.Viscocity);
}

void AddSpring(int springKey, int otherPIndex, float springRestLen)
{
    SpringPairs[springKey].linkedIndex = otherPIndex;
    SpringPairs[springKey].restLength = springRestLen;
}

void DeleteSpring(int springKey, int otherPIndex, int maxIterationCount)
{
    int endIndex = springKey + maxIterationCount;
    for (int springIndex = springKey; springIndex < endIndex; springIndex++)
    {
        if (SpringPairs[springIndex].linkedIndex == otherPIndex)
        {
            SpringPairs[springIndex].linkedIndex = IOOR;
            return;
        }
    }
}

float2 LiquidSpringForce(PTypeStruct PType_i, PTypeStruct PType_otherPIndex, int pIndex, int otherPIndex, float absDst, float2 dst)
{
    // if (absDst > MaxInfluenceRadius-0.5) {return float2(0,0);}

    // // eliminate duplicate springs between particles
    // // if (pIndex < otherPIndex) {return;}

    // // int springKey = pIndex * SpringCapacity + (uint)otherPIndex % SpringCapacity;

    // int iteration = 0;
    // while (SpringPairs[springKey].linkedIndex != otherPIndex && SpringPairs[springKey].linkedIndex != IOOR && iteration < MaxIterationCount)
    // {
    //     springKey++;
    //     iteration++;
    // }
    // // if (iteration == MaxIterationCount) {return float2(0.0, 0.0);}
 
    // if (SpringPairs[springKey].linkedIndex != IOOR) {AddSpring(springKey, otherPIndex, 1);}
 
    // float diffMng = absDst - SpringPairs[springKey].restLength;
    // int absDiffMng = abs(diffMng);
    // int sgnDiffMng = sign(diffMng);
    // int plasticityConst = 0.7;
    // float tolDeformation = 0; // = yieldRatio / restLength
    // // ∆L = ∆t * α * sign(r − L) * max(0,|r −L| − γL)
    // SpringPairs[springKey].restLength -= plasticityConst * sgnDiffMng * max(0, absDiffMng - tolDeformation) * DeltaTime;
 
    float springStiffness = avg(PType_i.Elasticity, PType_otherPIndex.Elasticity);
    float2 normDst = normalize(dst);                             // SpringPairs[springKey].restLength
    float absSpringForce = LiquidSpringForceModel(springStiffness, MaxInfluenceRadius-0.8, MaxInfluenceRadius-0.5, absDst);
 
    float2 springForce = absSpringForce * normDst * 0.5;
    return -springForce * DeltaTime;
}

float2 InteractionForce(int pIndex)
{
    if (!LMousePressed && !RMousePressed) {return float2(0.0, 0.0);}
    int dir = 0;
    if (LMousePressed) {dir = -1;}
    else if (RMousePressed) {dir = 1;}

    float2 dst = PData[pIndex].PredPosition - float2(MouseX, MouseY);

    float absDst = length(dst);

    if (absDst > MaxInteractionRadius) {return float2(0.0, 0.0);}

    float absInteractionGradient = SmoothLiquid(absDst, MaxInteractionRadius);

    if (absDst == 0) {return float2(0.0, 0.0);}

    float2 interactionGradient = normalize(dst) * absInteractionGradient;

    float2 baseInteractionForce = interactionGradient * InteractionAttractionPower * dir;
    float fountainInteractionForce = 0;
    if (dir == -1)
    {
        float dstX = MaxInteractionRadius - abs(dst.x);
        fountainInteractionForce = InteractionFountainPower * absInteractionGradient * dstX;
    }

    return baseInteractionForce + float2(0.0, fountainInteractionForce);
}

[numthreads(ThreadsNum,1,1)]
void PreCalculations (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;

    PData[i].PredPosition = PData[i].Position + PData[i].Velocity * LookAheadFactor;
    // Make sure PredPositions[i] is within the world boundrary
    PData[i].PredPosition.x = max(min(PData[i].PredPosition.x, Width - 0.1), 0.1);
    PData[i].PredPosition.y = max(min(PData[i].PredPosition.y, Height - 0.1), 0.1);

    // LastVelocities
    PData[i].LastVelocity = PData[i].Velocity;
}

[numthreads(ThreadsNum,1,1)]
void CalculateDensities (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    // density
    float2 Dns = CalcDensity(i);
    PData[i].Density = Dns.x;
    PData[i].NearDensity = Dns.y;
}

[numthreads(ThreadsNum,1,1)]
void ParticleForces (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;

    // Can probably be optimised by using if (i > otherPIndex) to avoid calculating each pair twice

    // Int type conversion removes decimals, effectively doing a Floor() operation
    PDataStruct PData_i = PData[i];
    PTypeStruct PType_i = PTypes[PData_i.PType];
    int ChunkX = (int)(PData_i.PredPosition.x / MaxInfluenceRadius);
    int ChunkY = (int)(PData_i.PredPosition.y / MaxInfluenceRadius);
    float MaxInfluenceRadiusSqr = MaxInfluenceRadius * MaxInfluenceRadius;
    float2 totPressureForce = float2(0.0, 0.0);
    float2 totViscocityForce = float2(0.0, 0.0);
    float2 totSpringForce = float2(0.0, 0.0);
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int CurChunkX = ChunkX + x;
            int CurChunkY = ChunkY + y;
            
            if (!ValidChunk(CurChunkX, CurChunkY)) {continue;}

            int ChunkKey = CurChunkY * ChunkNumW + CurChunkX;
            int startIndex = StartIndices[ChunkKey];

            int Index = startIndex; 
            while (Index < ParticlesNum && ChunkKey == SpatialLookup[Index].y)
            {
                int otherPIndex = SpatialLookup[Index].x;
                if (i == otherPIndex) {Index += 1; continue;}
                PDataStruct PData_otherPIndex = PData[otherPIndex];
                PTypeStruct PType_otherPIndex = PTypes[PData_otherPIndex.PType];

                float2 dst = PData_otherPIndex.PredPosition - PData_i.PredPosition;
                float sqrDst = dot(dst, dst);
                // float absDst = sqrt(sqrDst);

                // int MaxIterationCount = 2;
                // int springKey = i * SpringCapacity + (uint)otherPIndex % SpringCapacity;
                // if (absDst > 1)
                // {
                //     DeleteSpring(springKey, otherPIndex, MaxIterationCount); 
                // }

                if (sqrDst > MaxInfluenceRadiusSqr) {Index += 1; continue;}
                float absDst = sqrt(sqrDst);
                
                totPressureForce += PressureForce(PData_i, PData_otherPIndex, PType_i, PType_otherPIndex, absDst, dst, otherPIndex);
                totViscocityForce += ViscocityForce(PData_i, PData_otherPIndex, PType_i, PType_otherPIndex, absDst); 
                // totSpringForce += LiquidSpringForce(PType_i, PType_otherPIndex, i, otherPIndex, absDst, dst);

                // Increment Index each iteration - Chunk particle search algorithm
                Index += 1;
            }
        }
    }

    float2 interactionForce = InteractionForce(i);

    float2 totForce = totPressureForce + totViscocityForce + totSpringForce + interactionForce;
    PData_i.Velocity.y -= PType_i.Gravity * DeltaTime;
    PData_i.Velocity += totForce * DeltaTime;
    PData_i.Position += PData_i.Velocity * DeltaTime;

    float4 PosVelData = BoundraryCheck(PData_i.Position, PData_i.Velocity, 0, PType_i.Damping);
    PData[i].Position = float2(PosVelData.x, PosVelData.y);
    PData[i].Velocity = float2(PosVelData.z, PosVelData.w);
}