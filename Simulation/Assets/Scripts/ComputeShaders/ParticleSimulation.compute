#pragma kernel PreCalculations
#pragma kernel CalculateDensities
#pragma kernel ParticleForces

#include "MathResources.hlsl"

static const int ThreadsNum = 1024;

// Constants
const int ChunkNumW;
const int ChunkNumH;
const int IOOR;
const int Width;
const int Height;
const int ParticlesNum;
const int RBodiesNum;
const int MaxInfluenceRadius;
const int SpawnDims;
const int TimeStepsPerRender;

const float LookAheadFactor;
const float TargetDensity;
const float PressureMultiplier;
const float NearPressureMultiplier;
const float Damping;
const float Viscocity;
const float Gravity;
const float RBodyElasticity;
const float BorderPadding;
const float MaxInteractionRadius;
const float InteractionAttractionPower;
const float InteractionFountainPower;
const float LiquidElasticity;
const float SpringCapacity;
const float Plasticity;

// Per-timestep-set constants
const float DeltaTime;
const float MouseX;
const float MouseY;
const bool RMousePressed;
const bool LMousePressed;

// Particles - Buffers
RWStructuredBuffer<int2> SpatialLookup; // [ParticlesNum](particleIndex, ChunkKey)
RWStructuredBuffer<int> StartIndices;

// for each particle i:
//    for each neightboor(i):
//        checkAndIfThereIsNoExistingSpringThenAddSpring()??????

// for each spring:
//    if springlen > MaxInfluenceRadius:
//        delete spring
struct SpringStruct
{
    int linkedIndex;
    // float yieldLen;
    // float plasticity;
    // float stiffness;
    float restLength;
};
RWStructuredBuffer<SpringStruct> SpringPairs;

struct PDataStruct
{
    float2 PredPosition;
    float2 Position;
    float2 Velocity;
    float2 LastVelocity;
    float Density;
    float NearDensity;
};
RWStructuredBuffer<PDataStruct> PData;


bool ValidChunk(int ChunkX, int ChunkY)
{
    if (ChunkX >= 0 && ChunkX < ChunkNumW && ChunkY >= 0 && ChunkY < ChunkNumH) {return true;}
    return false;
}

float2 CalcDensity(int pIndex) // (density, nearDensity)
{
    // Int type conversion removes decimals, effectively doing a Floor() operation
    int ChunkX = (int)(PData[pIndex].PredPosition.x / MaxInfluenceRadius);
    int ChunkY = (int)(PData[pIndex].PredPosition.y / MaxInfluenceRadius);

    float totDensity = 0.0;
    float totNearDensity = 0.0;
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int CurChunkX = ChunkX + x;
            int CurChunkY = ChunkY + y;
            
            if (!ValidChunk(CurChunkX, CurChunkY)) {continue;}

            int ChunkKey = CurChunkY * ChunkNumW + CurChunkX;
            int startIndex = StartIndices[ChunkKey];

            int Index = startIndex;
            while (Index < ParticlesNum && ChunkKey == SpatialLookup[Index].y)
            {
                int otherPIndex = SpatialLookup[Index].x;

                float dst = length(PData[pIndex].PredPosition - PData[otherPIndex].PredPosition);

                totDensity += SmoothLiquid(dst, MaxInfluenceRadius);
                totNearDensity += SmoothLiquidNear(dst, MaxInfluenceRadius);

                // Increment Index each iteration - Chunk particle search algorithm
                Index += 1;
            }
        }
    }
    
    return float2(totDensity, totNearDensity);
}

float4 BoundraryCheck(float2 pos, float2 vel, float extraPadding)
{
    float totPadding = BorderPadding + extraPadding;
    float velFactor = 1 - Damping;

    if (pos.y > Height - totPadding)
    {
        vel.y = -abs(vel.y) * velFactor;
        pos.y = Height - totPadding;
    }
    else if (pos.y < totPadding)
    {
        vel.y = abs(vel.y) * velFactor;
        pos.y = totPadding;
    }
    if (pos.x > Width - totPadding)
    {
        vel.x = -abs(vel.x) * velFactor;
        pos.x = Width - totPadding;
    }
    else if (pos.x < totPadding)
    {
        vel.x = abs(vel.x) * velFactor;
        pos.x = totPadding;
    }
    
    return float4(pos.x, pos.y, vel.x, vel.y);
}

float DensityToPressure(float density)
{
    float densityError = density - TargetDensity;
    float pressure = densityError * PressureMultiplier;
    return pressure;
}

float SharedPressure(float densityA, float densityB)
{
    float pressureA = DensityToPressure(densityA);
    float pressureB = DensityToPressure(densityB);
    float sharedPressure = avg(pressureA, pressureB);

    return sharedPressure;
}

float SharedNearPressure(float nearDensityA, float nearDensityB)
{
    float nearPressureA = nearDensityA * NearPressureMultiplier;
    float nearPressureB = nearDensityB * NearPressureMultiplier;
    float sharedNearPressure = avg(nearPressureA, nearPressureB);

    return sharedNearPressure;
}

float2 PressureForce(int pIndex, int otherPIndex, float absDst, float2 dst)
{
    float absPressureGradient = SmoothLiquidDer(absDst, MaxInfluenceRadius);
    float absNearPressureGradient = SmoothLiquidNearDer(absDst, MaxInfluenceRadius);

    float2 pressureGradient = float2(0.0, 0.0);
    float2 nearPressureGradient = float2(0.0, 0.0);

    if (absDst == 0) {
        // semirandom direction
        float2 randVector = float2(pIndex % 0.2842, pIndex % 0.1827);

        pressureGradient = 0.05 * randVector * absPressureGradient;
        nearPressureGradient = 0.05 * randVector * absNearPressureGradient;
    }
    else {
        pressureGradient = normalize(dst) * absPressureGradient;
        nearPressureGradient = normalize(dst) * absNearPressureGradient;
    }

    float densityA = PData[pIndex].Density;
    float densityB = PData[otherPIndex].Density;
    float avgPressure = SharedPressure(densityA, densityB);

    float nearDensityA = PData[pIndex].NearDensity;
    float nearDensityB = PData[otherPIndex].NearDensity;
    float avgNearPressure = SharedNearPressure(nearDensityA, nearDensityB);

    if (densityA + densityB == 0) {return float2(0.0, 0.0);}
    float2 pressureForce = (avgPressure * pressureGradient + avgNearPressure * nearPressureGradient) / avg(densityA, densityB);

    return pressureForce;
}

float2 ViscocityForce(int pIndex, int otherPIndex, float absDst)
{
    float2 viscocityForce = (PData[otherPIndex].LastVelocity - PData[pIndex].LastVelocity) * SmoothViscosityLaplacian(absDst, MaxInfluenceRadius);

    return viscocityForce * Viscocity;
}

void AddSpring(int springKey, int otherPIndex, float springRestLen)
{
    SpringPairs[springKey].linkedIndex = otherPIndex;
    SpringPairs[springKey].restLength = springRestLen;
}

void DeleteSpring(int springKey, int otherPIndex, int maxIterationCount)
{
    int endIndex = springKey + maxIterationCount;
    for (int springIndex = springKey; springIndex < endIndex; springIndex++)
    {
        if (SpringPairs[springIndex].linkedIndex == otherPIndex)
        {
            SpringPairs[springIndex].linkedIndex = IOOR;
            return;
        }
    }
}

float2 LiquidSpringForce(int pIndex, int otherPIndex, float absDst, float2 dst)
{
    int MaxIterationCount = 1;
    int springKey = pIndex * SpringCapacity + otherPIndex % SpringCapacity;
    if (absDst > MaxInfluenceRadius) {DeleteSpring(springKey, otherPIndex, MaxIterationCount); return float2(0.0, 0.0);}
    // eliminate duplicate springs between particles
    // if (pIndex < otherPIndex) {return;}

    int iteration = 0;
    while (SpringPairs[springKey].linkedIndex != otherPIndex && SpringPairs[springKey].linkedIndex != IOOR && iteration < MaxIterationCount)
    {
        springKey++;
        iteration++;
    }
    if (iteration == MaxIterationCount) {return float2(0.0, 0.0);}

    if (SpringPairs[springKey].linkedIndex == IOOR) {AddSpring(springKey, otherPIndex, 0.7);}

    float diffMng = absDst - SpringPairs[springKey].restLength;
    int absDiffMng = abs(diffMng);
    int sgnDiffMng = sign(diffMng);
    int plasticityConst = 0.2;
    float neutralLenDiff = 0.1;
    // ∆L = ∆t * α * sign(r − L) * max(0,|r −L| − γL) 
    SpringPairs[springKey].restLength -= plasticityConst * sgnDiffMng * max(0, absDiffMng - neutralLenDiff) * DeltaTime;

    float springStiffness = LiquidElasticity;
    float2 normDst = normalize(dst);
    float absSpringForce = LiquidSpringForceModel(springStiffness, SpringPairs[springKey].restLength, MaxInfluenceRadius, absDst);

    float2 springForce = absSpringForce * normDst / 2;
    return -springForce * DeltaTime;
    // PData[pIndex].Velocity -= springForce * LiquidElasticity * DeltaTime;
    // PData[otherPIndex].Velocity += springForce * LiquidElasticity * DeltaTime;
}

float2 InteractionForce(int pIndex)
{
    if (!LMousePressed && !RMousePressed) {return float2(0.0, 0.0);}
    int dir = 0;
    if (LMousePressed) {dir = -1;}
    else if (RMousePressed) {dir = 1;}

    float2 dst = PData[pIndex].PredPosition - float2(MouseX, MouseY);

    float absDst = length(dst);

    if (absDst > MaxInteractionRadius) {return float2(0.0, 0.0);}

    float absInteractionGradient = SmoothLiquid(absDst, MaxInteractionRadius);

    if (absDst == 0) {return float2(0.0, 0.0);}

    float2 interactionGradient = normalize(dst) * absInteractionGradient;

    float2 baseInteractionForce = interactionGradient * InteractionAttractionPower * dir;
    float fountainInteractionForce = 0;
    if (dir == -1)
    {
        float dstX = MaxInteractionRadius - abs(dst.x);
        fountainInteractionForce = InteractionFountainPower * absInteractionGradient * dstX;
    }

    return baseInteractionForce + float2(0.0, fountainInteractionForce);
}

[numthreads(ThreadsNum,1,1)]
void PreCalculations (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;

    PData[i].PredPosition = PData[i].Position + PData[i].Velocity * LookAheadFactor;
    // Make sure PredPositions[i] is within the world boundrary
    PData[i].PredPosition.x = max(min(PData[i].PredPosition.x, Width - 0.1), 0.1);
    PData[i].PredPosition.y = max(min(PData[i].PredPosition.y, Height - 0.1), 0.1);

    // LastVelocities
    PData[i].LastVelocity = PData[i].Velocity;
}

[numthreads(ThreadsNum,1,1)]
void CalculateDensities (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    // density
    float2 Dns = CalcDensity(i);
    PData[i].Density = Dns.x;
    PData[i].NearDensity = Dns.y;
}

[numthreads(ThreadsNum,1,1)]
void ParticleForces (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;

    // Can probably be optimised by using if (i > otherPIndex) to avoid calculating each pair twice

    // Int type conversion removes decimals, effectively doing a Floor() operation
    int ChunkX = (int)(PData[i].PredPosition.x / MaxInfluenceRadius);
    int ChunkY = (int)(PData[i].PredPosition.y / MaxInfluenceRadius);
    float MaxInfluenceRadiusSqr = MaxInfluenceRadius * MaxInfluenceRadius;
    float2 totPressureForce = float2(0.0, 0.0);
    float2 totViscocityForce = float2(0.0, 0.0);
    float2 totSpringForce = float2(0.0, 0.0);
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int CurChunkX = ChunkX + x;
            int CurChunkY = ChunkY + y;
            
            if (!ValidChunk(CurChunkX, CurChunkY)) {continue;}

            int ChunkKey = CurChunkY * ChunkNumW + CurChunkX;
            int startIndex = StartIndices[ChunkKey];

            int Index = startIndex; 
            while (Index < ParticlesNum && ChunkKey == SpatialLookup[Index].y)
            {
                int otherPIndex = SpatialLookup[Index].x;
                if (i == otherPIndex) {Index += 1; continue;}

                float2 dst = PData[otherPIndex].PredPosition - PData[i].PredPosition;
                float sqrDst = dot(dst, dst);
                if (sqrDst > MaxInfluenceRadiusSqr) {Index += 1; continue;}
                float absDst = sqrt(sqrDst);


                totPressureForce += PressureForce(i, otherPIndex, absDst, dst);
                totViscocityForce += ViscocityForce(i, otherPIndex, absDst);
                // totSpringForce += LiquidSpringForce(i, otherPIndex, absDst, dst);

                // Increment Index each iteration - Chunk particle search algorithm
                Index += 1;
            }
        }
    }

    float2 interactionForce = InteractionForce(i);
    //                                                                   / (constant) or density[i]???
    float2 totForce = (totPressureForce + totViscocityForce + totSpringForce + interactionForce) / 9;

    PData[i].Velocity.y -= Gravity * DeltaTime;
    PData[i].Velocity += totForce * DeltaTime;
    PData[i].Position += PData[i].Velocity * DeltaTime;

    float4 PosVelData = BoundraryCheck(PData[i].Position, PData[i].Velocity, 0);
    PData[i].Position = float2(PosVelData.x, PosVelData.y);
    PData[i].Velocity = float2(PosVelData.z, PosVelData.w);
}