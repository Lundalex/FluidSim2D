void RemoveSpring(int pIndex, int otherPIndex)
{
    int startIndex = SpringCapacity * pIndex;
    int endIndex = SpringCapacity * pIndex + SpringCapacity;
    for (int i = startIndex; i < endIndex; i++)
    {
        if (SpringPairs[i].linkedPIndex == otherPIndex)
        {
            // "Remove" spring
            SpringPairs[i].linkedPIndex = IOOR;
            return;
        }
        if (SpringPairs[i].linkedPIndex == IOOR)
        {
            // No more stored springs left
            return;
        }
    }
}

float2 LiquidSpringForce(int pIndex, int otherPIndex, float absDst, float2 dst)
{
    int startIndex = SpringCapacity * pIndex;
    int endIndex = SpringCapacity * pIndex + SpringCapacity;
    int springIndex = SIOOR;
    for (int i = startIndex; i < endIndex; i++)
    {
        // Try to find existing spring
        if (SpringPairs[i].linkedPIndex == otherPIndex)
        {
            springIndex = i;
            break;
        }
        // Otherwise, try to find an empty spring index
        if (SpringPairs[i].linkedPIndex == IOOR)
        {
            // "Add" spring
            SpringPairs[i].linkedPIndex = otherPIndex;
            SpringPairs[i].yieldLen = 1;
            springIndex = i;
            break;
        }
    }
    if (springIndex == SIOOR) {return float2(0.0, 0.0);} // If no storage is available, do nothing

    // Update spring rest length
    // float displacementMagnitude = SpringPairs[springIndex].restLength - absDst;
    // if (abs(displacementMagnitude) > SpringPairs[springIndex].yieldLen)
    // {
    //     if (displacementMagnitude > 0)
    //     {
    //         SpringPairs[springIndex].restLength += 1 * DeltaTime;
    //     }
    //     else if (displacementMagnitude < 0)
    //     {
    //         SpringPairs[springIndex].restLength -= 1 * DeltaTime;
    //     }
    // }

    // Calculate spring force for pIndex particle
    float2 normDst = normalize(dst);
    float absSpringForce = LiquidSpringForceModel(SpringPairs[springIndex].stiffness, SpringPairs[springIndex].restLength, MaxInfluenceRadius, absDst);
    float2 springForce = absSpringForce * normDst / 2;

    return -springForce * LiquidElasticity;
}