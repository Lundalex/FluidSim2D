StartIndicesBuffer.GetData(StartIndices);
PDataBuffer.GetData(PData);
SpatialLookupBuffer.GetData(SpatialLookup);
SpringCapacitiesBuffer.GetData(SpringCapacities);
ParticleSpringsCombinedBuffer.GetData(ParticleSpringsCombined);

if (FrameBufferCycle)
{
    SpringStartIndicesBuffer_dbA.GetData(SpringStartIndices);
}
else
{
    SpringStartIndicesBuffer_dbB.GetData(SpringStartIndices);
}

bool sprFound = false;
for (int id_x = 0; id_x < 2*ParticlesNum; id_x++)
{
    int ii = FrameBufferCycle
    ? id_x
    : id_x + ParticleSpringsCombinedHalfLength;

    // B is connected to A
    SpringStruct lastSpring_i = ParticleSpringsCombined[ii];
    if (lastSpring_i.PLinkedA == -1) { continue; }
    bool printNewSpringIndex = false;
    if (lastSpring_i.RestLength != MaxInfluenceRadius)
    {
        if (lastSpring_i.RestLength < -1.5f)
        {
            int dww222da = 0;
        }
    }
    
    PDataStruct PData_A = PData[lastSpring_i.PLinkedA];
    PDataStruct PData_B = PData[lastSpring_i.PLinkedB];

    float2 PosDiff = PData_A.Position - PData_B.Position;
    float absPosDiffSqr = Vector2.Dot(PosDiff, PosDiff);

    // If A and B are in range of each other, transfer data. Otherwise, do not (spring data is deleted)
    if (absPosDiffSqr <= MaxInfluenceRadiusSqr)
    {
        int pOrder_A = PData_A.POrder;
        int pOrder_B = PData_B.POrder;

        int newChunkX_A = PData_A.LastChunkKey % ChunkNumW;
        int newChunkY_A = (int)(PData_A.LastChunkKey / ChunkNumW);

        int newChunkX_B = PData_B.LastChunkKey % ChunkNumW;
        int newChunkY_B = (int)(PData_B.LastChunkKey / ChunkNumW);

        // not optimal since the same calculations are performed by multiple threads (many springs in each chunk)
        int localSpringBCapacityOrder = 0;
        bool inRangeAB = false;
        bool shouldBreak = false;
        for (int x = -1; x <= 1 && !shouldBreak; x++)
        {
            int curChunkX = newChunkX_A + x;

            for (int y = -1; y <= 1 && !shouldBreak; y++)
            {
                int curChunkY = newChunkY_A + y;
                int curChunkKey = curChunkY * ChunkNumW + curChunkX;
                
                int startIndex = StartIndices[curChunkKey];

                if(!(curChunkX >= 0 && curChunkX < ChunkNumW && curChunkY >= 0 && curChunkY < ChunkNumH)) { continue; }

                int Index = startIndex; 
                while (Index < ParticlesNum && curChunkKey == SpatialLookup[Index].y)
                {
                    int otherPIndex = SpatialLookup[Index].x;
                    if (lastSpring_i.PLinkedB == otherPIndex) { inRangeAB = true; shouldBreak = true; if(lastSpring_i.PLinkedA == 1000 && lastSpring_i.PLinkedB == 999) { printNewSpringIndex = true; sprFound = true; } break; }
                    localSpringBCapacityOrder++;
                    Index++;
                }
            }
        }
        if (inRangeAB)
        {
            int newNeighboorCount = localSpringBCapacityOrder;

            int newChunkKey_A = newChunkY_A * ChunkNumW + newChunkX_A;
            if (newChunkKey_A == 0 || SpringCapacities[newChunkKey_A].x == 0) { continue; } // avoid [-1] error

            int nearbyCapacity = SpringCapacities[newChunkKey_A].y / SpringCapacities[newChunkKey_A].x;
            int newSpringIndex = FrameBufferCycle
            ? SpringStartIndices[newChunkKey_A-1] + pOrder_A * nearbyCapacity + newNeighboorCount + ParticleSpringsCombinedHalfLength
            : SpringStartIndices[newChunkKey_A-1] + pOrder_A * nearbyCapacity + newNeighboorCount;

            if (printNewSpringIndex)
            {
                Debug.Log(ParticleSpringsCombined[newSpringIndex].RestLength);
            }
    
            // ParticleSpringsCombined[newSpringIndex] = lastSpring_i;
        }
    }
}
if (!sprFound)
{
    Debug.Log("NoSpringFound");
}

foundParticleB = 999;
Debug.Log("Frame");
for (int j = 0; j < ParticleSpringsCombined.Length; j++)
{
    if (ParticleSpringsCombined[j].PLinkedA == 1000) { 
        if (foundParticleB == -1)
        {
            foundParticleB = ParticleSpringsCombined[j].PLinkedB;
        }
        else
        {
            if (ParticleSpringsCombined[j].PLinkedB == foundParticleB)
            {
                float2 pA = PData[ParticleSpringsCombined[j].PLinkedA].Position;
                float2 pB = PData[ParticleSpringsCombined[j].PLinkedB].Position;
                float2 diff = pA - pB;
                float dst = (float)Math.Sqrt(diff.x*diff.x+diff.y*diff.y);
                if (dst <= MaxInfluenceRadius)
                {
                    // Debug.Log(ParticleSpringsCombined[i].PLinkedB);
                    // Debug.Log(i);
                    Debug.Log(ParticleSpringsCombined[j].RestLength);
                }
            }
        }
    }
}

bool sprFound2 = false;
if (i != -11)
{
    // int lastSpringIndex = -1;
    int[] lastSpringIndices = new int[10000000];
    for (int p = 0; p < lastSpringIndices.Length; p++)
    {
        lastSpringIndices[p] = -1;
    }
    
    for (int k = 0; k < ParticlesNum; k++)
    {
            int pIndex = k;


            PDataStruct PData_i = PData[pIndex];
            int baseX = PData_i.LastChunkKey % ChunkNumW;
            int baseY = (int)(PData_i.LastChunkKey / ChunkNumW);
            int pOrder = PData_i.POrder;

            int chunkKe = baseY * ChunkNumW + baseX;
            int b = SpringCapacities[chunkKe].y;
            int c = SpringCapacities[chunkKe].x;
            if (SpringCapacities[chunkKe].x == 0 || chunkKe == 0)
            {
                continue;
            }
            int nearbyCapacity = SpringCapacities[chunkKe].y / SpringCapacities[chunkKe].x;

            int nNum = 0;
            for (int x = -1; x <= 1; x++)
            {
                for (int y = -1; y <= 1; y++)
                {
                    int curChunkX = baseX + x;
                    int curChunkY = baseY + y;

                    if (!(curChunkX >= 0 && curChunkX < ChunkNumW && curChunkY >= 0 && curChunkY < ChunkNumH)) { continue; }

                    int chunkKey = curChunkY * ChunkNumW + curChunkX;
                    int startIndex = StartIndices[chunkKey];

                    int Index = startIndex; 
                    while (Index < ParticlesNum && chunkKey == SpatialLookup[Index].y)
                    {
                        int otherPIndex = SpatialLookup[Index].x;

                        int springIndex = FrameBufferCycle
                        ? SpringStartIndices[chunkKe-1] + pOrder * nearbyCapacity + nNum + ParticleSpringsCombinedHalfLength
                        : SpringStartIndices[chunkKe-1] + pOrder * nearbyCapacity + nNum;

                        SpringStruct springw = ParticleSpringsCombined[springIndex];

                        if (k == 1000 && otherPIndex == 999)
                        {
                            Debug.Log(springw.RestLength);
                            sprFound2 = true;
                        }

                        if (lastSpringIndices[springIndex] == 1)
                        {
                            Debug.Log(springIndex);
                        }
                        lastSpringIndices[springIndex] += 1;
                        if (lastSpringIndices[springIndex] > 0)
                        {
                            int afwwf = 0;
                        }
                        
                        Index++;
                        nNum++;
                    }
                }
            
            
            if (nNum > nearbyCapacity)
            {
                int oooo = 0;
            }
        }
}
    int d = 0;
    int a1111 = 0;
    for (int l = 1; l < lastSpringIndices.Length; l++)
    {
        if(lastSpringIndices[l-1] == -1 && lastSpringIndices[l] != -1)
        {
            // Debug.Log(lastSpringIndices[l]);
            int a22=1;
            a1111++;
        }
        if (lastSpringIndices[l] > 0)
        {
            int a222=1;
            d++;
        }
    }
    int dwwdwddwdwdw = 0;
}
if (!sprFound2) { Debug.Log("No spring found"); }